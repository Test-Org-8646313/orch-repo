name: Orch-Workflow

on:
  push:
    branches: ["workflow-actions"]

permissions: write-all

jobs:
  BranchDeploy:
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     python-version: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v4

      - name: Clone json data repo
        uses: actions/checkout@v4
        with:
          repository: Test-Org-8646313/lob-repo
          path: data-files
          # ref: 2.

      - name: Clone tf-mod-repo
        uses: actions/checkout@v4
        with:
          repository: Test-Org-8646313/tf-mod-repo
          path: tf-mod-files
          # ref: 2.

      - name: Clone child repository
        # env:
        # WORKFLOW_NAME: ${{env.GITHUB_REF##*/}}-${{env.GITHUB_SHA}}
        # WORKFLOW_NAME: ${{GITHUB_SHA}}
        run: |
          git clone https://x-access-token:${{ secrets.CHILD_REPO_ACCESS_TOKEN }}@github.com/Test-Org-8646313/target-dev-repo.git
          cd target-dev-repo
          ls -al
          cp -R ../tf-mod-files/formatter .
          cp ../workflow_file.yaml ./.github/workflows/workflow_file-${GITHUB_SHA}.yaml
          cp ../data-files/data.json ./data.json
          sed -i "s|<WORKFLOW_NAME>|workflow-$GITHUB_SHA|g" ./.github/workflows/workflow_file-${GITHUB_SHA}.yaml
          ls -al

          # git checkout -b new-branch  # Create and checkout a new branch

      # - name: Clone target-dev-repo
      #   uses: actions/checkout@v4
      #   with:
      #     repository: Test-Org-8646313/target-dev-repo
      #     path: target-source-code
      #     # ref: 2.
      # - name: Copy tf-mod files
      #   run: |
      #     sudo cp -R tf-mod-files/formatter target-source-code
      #     sudo cp workflow_file.yaml target-source-code/.github/workflows/workflow_file-${GITHUB_SHA}.yaml
      #     sudo cp data-files/data.json target-source-code/data.json
      - name: Setup git config
        env:
          GITHUB_TOKEN: ${{ secrets.CHILD_REPO_ACCESS_TOKEN }}
        run: |
          cd target-dev-repo
          ls -al
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions-bot@github.com"
          git checkout -b "auto-branch-${GITHUB_SHA}"
          git add .
          git commit -m "Updated new code files"
          # git config --unset-all http.https://github.com/.extraheader
          git push --set-upstream origin "auto-branch-${GITHUB_SHA}"

        # - run: git push origin master

    # - name: Set up Python ${{ matrix.python-version }}
    #   uses: actions/setup-python@v3
    #   with:
    #     python-version: ${{ matrix.python-version }}
    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install pylint
    # - name: Analysing the code with pylint
    #   run: |
    #     pylint $(git ls-files '*.py')

  track_workflow2:
    runs-on: ubuntu-latest
    needs: [BranchDeploy]
    steps:
      - name: child-workflow-polling 2
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        # env:
        #   GITHUB_TOKEN: ${{ secrets.CHILD_REPO_ACCESS_TOKEN }}
        #   REPO: "Test-Org-8646313/target-dev-repo"
        #   BRANCH: "auto-branch-${{ github.sha }}"
        #   WORKFLOW_FILE: "workflow-${{ github.sha }}"
        with:
          owner: Test-Org-8646313
          repo: target-dev-repo
          github_token: ${{ secrets.CHILD_REPO_ACCESS_TOKEN }}
          github_user: github-bot
          workflow_file_name: "workflow-${{ github.sha }}"
          ref: "auto-branch-${{ github.sha }}"
          wait_interval: 10
          client_payload: "{}"
          propagate_failure: true
          trigger_workflow: false
          wait_workflow: true

  # track-workflow:
  #   runs-on: ubuntu-latest
  #   needs: [BranchDeploy]
  #   steps:
  #     - name: child-workflow-polling
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.CHILD_REPO_ACCESS_TOKEN }}
  #         REPO: "Test-Org-8646313/target-dev-repo"
  #         BRANCH: "auto-branch-${{ github.sha }}"
  #         #  ${{ needs.CI.outputs.child_repo_branch }}
  #       run: |
  #         STATUS="not-triggered"
  #         result="to-be-set"
  #         WORKFLOW_RUN_ID=$(curl -s -H "Authorization: token ${{ env.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.REPO }}/actions/runs | jq '.workflow_runs[] | select(.head_branch=="${{ env.BRANCH }}") | .id' | head -n 1)
  #         echo "Workflow Run ID: $WORKFLOW_RUN_ID"

  #         while [ "$STATUS" != "completed" ]; do
  #           status_full=$(curl -s -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
  #             https://api.github.com/repos/${{ env.REPO }}/actions/runs/$WORKFLOW_RUN_ID)
  #           STATUS=$(echo "$status_full"| jq -r '.status')
  #           result=$(echo "$status_full"| jq -r '.conclusion')
  #           echo "Status: $STATUS"
  #           sleep 2 ### -> 15
  #         done

  #         echo "------------------------------------"
  #         echo "Job finished with final status: $result"
